jenkins:
  clouds:
    - ecs:
        cluster: {{ECS_CLUSTER_ARN}}
        # Credentials should not be set locally. Use IAM roles assigned to the container.
        credentialsId: False
        regionName: {{AWS_REGION}}
        name: {{STACK_NAME}}
        jenkinsUrl: {{JENKINS_URL}}
        templates:
          - label: fargate-agent
            templateName: fargate-agent
            image: {{SIMPLE_AGENT_IMAGE}}
            launchType: FARGATE
            cpu: 1024
            memoryReservation: 2048
            networkMode: awsvpc
            subnets: {{SUBNET_IDS}}
            securityGroups: {{SECURITY_GROUP_IDS}}
            executionRole: {{EXECUTION_ROLE_ARN}}
            taskrole: {{TASK_ROLE_ARN}}
            logDriver: awslogs
            logDriverOptions:
              - name: awslogs-region
                value: {{AWS_REGION}}
              - name: awslogs-group
                value: {{LOG_GROUP}}
              - name: awslogs-stream-prefix
                value: {{LOG_STREAM_PREFIX}}
            environments:
              - name: JENKINS_URL
                value: {{JENKINS_URL}}
            tags:
            # TODO: Inject from CDK
            - name: Department
              value: "501"
            - name: DevTeam
              value: Voyager
            - name: Environment
              value: Development
          - label: fargate-postgres-12
            templateName: postgres-12
            taskDefinitionOverride: {{POSTGRES12_TASK_DEF}}
            agentContainerName: jnlp
            launchType: FARGATE
            networkMode: awsvpc
            subnets: {{SUBNET_IDS}}
            securityGroups: {{SECURITY_GROUP_IDS}}
            environments:
              - name: JENKINS_URL
                value: {{JENKINS_URL}}
            tags:
            - name: Department
              value: "501"
            - name: DevTeam
              value: Voyager
            - name: Environment
              value: Development
          - label: fat
            templateName: fat
            image: {{AGENT_IMAGE_JAVA_11}}
            launchType: FARGATE
            cpu: 1024
            memoryReservation: 2048
            networkMode: awsvpc
            subnets: {{SUBNET_IDS}}
            securityGroups: {{SECURITY_GROUP_IDS}}
            executionRole: {{EXECUTION_ROLE_ARN}}
            taskrole: {{TASK_ROLE_ARN}}
            logDriver: awslogs
            logDriverOptions:
              - name: awslogs-region
                value: {{AWS_REGION}}
              - name: awslogs-group
                value: {{LOG_GROUP}}
              - name: awslogs-stream-prefix
                value: {{LOG_STREAM_PREFIX}}
            tags:
            - name: Department
              value: "501"
            - name: DevTeam
              value: Voyager
            - name: Environment
              value: Development
          - label: ecs-ec2
            templateName: ecs-ec2
            image: {{SIMPLE_AGENT_IMAGE}}
            launchType: EC2
            defaultCapacityProvider: true
            cpu: 512
            memoryReservation: 512
            networkMode: bridge
            subnets: {{SUBNET_IDS}}
            securityGroups: {{SECURITY_GROUP_IDS}}
            executionRole: {{EXECUTION_ROLE_ARN}}
            taskrole: {{TASK_ROLE_ARN}}
            privileged: true
            enableExecuteCommand: true
            tags:
              # TODO: Inject from CDK
              - name: Department
                value: "501"
              - name: DevTeam
                value: Voyager
              - name: Environment
                value: Development
    - codeBuild:
        agentConnectTimeout: 180
        buildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - curl --create-dirs -fsSLo /usr/share/jenkins/agent.jar $JENKINS_CODEBUILD_AGENT_URL
                - curl --create-dirs -fsSLo /usr/share/jenkins/jenkins-agent https://raw.githubusercontent.com/jenkinsci/docker-agent/5c3469aa6b314fa2686b0565f41d9f3bd10a1a86/jenkins-agent
                - chmod -R a+rX /usr/share/jenkins
                - chmod +x /usr/share/jenkins/jenkins-agent
            build:
              commands:
                - /usr/share/jenkins/jenkins-agent $JENKINS_CODEBUILD_PROXY_CREDENTIALS $JENKINS_CODEBUILD_DISABLE_SSL_VALIDATION $JENKINS_CODEBUILD_NORECONNECT -workDir /home/jenkins/agent
        codeBuildProjectName: "{{CODEBUILD_PROJECT_NAME}}"
        computeType: "BUILD_GENERAL1_SMALL"
        disableHttpsCertValidation: false
        dockerImage: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        dockerImagePullCredentials: CODEBUILD
        environmentType: "LINUX_CONTAINER"
        # TODO: Chicken-and-egg problem here
        jenkinsUrl: {{JENKINS_PUBLIC_URL}}
        label: "codebuild-agent"
        maxAgents: 50
        name: "codebuild"
        noKeepAlive: false
        noReconnect: true
        protocols: "JNLP4-connect"
        region: "us-east-1"
        verifyIsCodeBuildIPOnJNLP: false
        webSocket: true
  securityRealm:
    local:
      allowsSignup: false
      users:
       - id: {{ADMIN_USERNAME}}
         password: {{ADMIN_PASSWORD}}
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: true
  numExecutors: 2
  labelString: built-in
  mode: EXCLUSIVE
  globalNodeProperties:
  - envVars:
      env:
      - key: IS_FARGATE
        value: "true"
      - key: AGENT_IMAGE_JAVA_11
        value: "{{AGENT_IMAGE_JAVA_11}}"
      - key: AGENT_LABEL_DEFAULT
        value: "fargate-agent"
      - key: AGENT_LABEL_POSTGRES_12
        value: "fargate-postgres-12"
  disabledAdministrativeMonitors:
  # We only use the controller's executors in rare cases where we want fast-starting, short-lived agent
  - "jenkins.diagnostics.ControllerExecutorsAgents"
credentials:
  system:
    domainCredentials:
    - credentials:
      - gitHubApp:
          appID: {{GH_CREDENTIAL_ID}}
          id: {{GH_CREDENTIAL_APP_ID}}
          owner: {{GH_CREDENTIAL_OWNER}}
          privateKey: "{{GH_CREDENTIAL_PRIVATE_KEY}}"
